@model DivineMonad.Engine.AdvanceStats

@{
    Layout = "_SubLayout";
}


<div class="game-content-character" unselectable="on" onselectstart="return false;" onmousedown="return false;">
    <ul class="nav character-nav-tab" id="statsTab" role="tablist">
        <li class="nav-item">
            <a class="nav-link active" id="base-tab" data-toggle="tab" href="#base" role="tab" aria-controls="base" aria-selected="true">Base</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" id="advanced-tab" data-toggle="tab" href="#advanced" role="tab" aria-controls="advanced" aria-selected="false">Advanced</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" id="others-tab" data-toggle="tab" href="#others" role="tab" aria-controls="others" aria-selected="false">Others</a>
        </li>
    </ul>
    <div class="tab-content" id="statsTabContent">
        <div class="tab-pane fade show active" id="base" role="tabpanel" aria-labelledby="base-tab">
            <div class="row mb-3">
                <div class="col-4 font-weight-bold offset-1 pl-4">
                    Basic Statistics
                </div>
                <div class="col-3 font-weight-bold offset-1">
                    Stats Points:
                </div>
                <div class="col-1 pl-0" id="statsPoints">
                    @Html.DisplayFor(s => s.StatsPoints)
                </div>
            </div>
            <div class="row">
                <div class="col-3 font-weight-bold offset-1 pl-4">
                    @Html.DisplayNameFor(s => s.HitPoints):
                </div>
                <div class="col-2">
                    @Html.DisplayFor(s => s.HitPoints)
                </div>
                <div class="col-2" id="hitpoints">
                    (+0)
                </div>
                <div class="col-2">
                </div>
            </div>
            <div class="row">
                <div class="col-3 font-weight-bold offset-1 pl-4">
                    @Html.DisplayNameFor(s => s.Attack):
                </div>
                <div class="col-2">
                    @Html.DisplayFor(s => s.Attack)
                </div>
                <div class="col-2" id="attack">
                    (+0)
                </div>
                <div class="col-2">
                </div>
            </div>
            <div class="row">
                <div class="col-3 font-weight-bold offset-1 pl-4">
                    @Html.DisplayNameFor(s => s.Stamina):
                </div>
                <div class="col-2">
                    @Html.DisplayFor(s => s.Stamina)
                </div>
                <div class="col-2" id="stamina">
                    (+0)
                </div>
                <div class="col-2 d-flex">
                    <div class="btn-svg plus stamina pr-2">
                        <button type="button" class="fas fa-plus-square"></button>
                    </div>
                    <div class="btn-svg minus stamina">
                        <button type="button" class="fas fa-minus-square"></button>
                    </div>
                </div>
            </div>
            <div class="row ">
                <div class="col-3 font-weight-bold offset-1 pl-4">
                    @Html.DisplayNameFor(s => s.Strength):
                </div>
                <div class="col-2">
                    @Html.DisplayFor(s => s.Strength)
                </div>
                <div class="col-2" id="strength">
                    (+0)
                </div>
                <div class="col-2 d-flex">
                    <div class="btn-svg plus strength pr-2">
                        <button type="button" class="fas fa-plus-square"></button>
                    </div>
                    <div class="btn-svg minus strength">
                        <button type="button" class="fas fa-minus-square"></button>
                    </div>
                </div>
            </div>
            <div class="row ">
                <div class="col-3 font-weight-bold offset-1 pl-4">
                    @Html.DisplayNameFor(s => s.Agility):
                </div>
                <div class="col-2">
                    @Html.DisplayFor(s => s.Agility)
                </div>
                <div class="col-2" id="agility">
                    (+0)
                </div>
                <div class="col-2 d-flex">
                    <div class="btn-svg plus agility pr-2">
                        <button type="button" class="fas fa-plus-square"></button>
                    </div>
                    <div class="btn-svg minus agility">
                        <button type="button" class="fas fa-minus-square"></button>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-3 font-weight-bold offset-1 pl-4">
                    @Html.DisplayNameFor(s => s.Dexterity):
                </div>
                <div class="col-2">
                    @Html.DisplayFor(s => s.Dexterity)
                </div>
                <div class="col-2" id="dexterity">
                    (+0)
                </div>
                <div class="col-2 d-flex">
                    <div class="btn-svg plus dexterity pr-2">
                        <button type="button" class="fas fa-plus-square"></button>
                    </div>
                    <div class="btn-svg minus dexterity">
                        <button type="button" class="fas fa-minus-square"></button>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-3 font-weight-bold offset-1 pl-4">
                    @Html.DisplayNameFor(s => s.Luck):
                </div>
                <div class="col-2">
                    @Html.DisplayFor(s => s.Luck)
                </div>
                <div class="col-2" id="luck">
                    (+0)
                </div>
                <div class="col-2 d-flex">
                    <div class="btn-svg plus luck pr-2">
                        <button type="button" class="fas fa-plus-square"></button>
                    </div>
                    <div class="btn-svg minus luck">
                        <button type="button" class="fas fa-minus-square"></button>
                    </div>
                </div>
            </div>
        </div>
        <div class="tab-pane fade" id="advanced" role="tabpanel" aria-labelledby="advanced-tab">
            <div class="row justify-content-center">
                <div class="col-3 font-weight-bold">
                    @Html.DisplayNameFor(s => s.AttackMin):
                </div>
                <div class="col-2">
                    @Html.DisplayFor(s => s.AttackMin)
                </div>
            </div>
            <div class="row justify-content-center">
                <div class="col-3 font-weight-bold">
                    @Html.DisplayNameFor(s => s.AttackMax):
                </div>
                <div class="col-2">
                    @Html.DisplayFor(s => s.AttackMax)
                </div>
            </div>
            <div class="row justify-content-center">
                <div class="col-3 font-weight-bold">
                    @Html.DisplayNameFor(s => s.Armor):
                </div>
                <div class="col-2">
                    @Html.DisplayFor(s => s.Armor)
                </div>
            </div>
            <div class="row justify-content-center">
                <div class="col-3 font-weight-bold">
                    @Html.DisplayNameFor(s => s.DmgRed):
                </div>
                <div class="col-2">
                    @Html.DisplayFor(s => s.DmgRed)
                </div>
            </div>
            <div class="row justify-content-center">
                <div class="col-3 font-weight-bold">
                    @Html.DisplayNameFor(s => s.Block):
                </div>
                <div class="col-2">
                    @Html.DisplayFor(s => s.Block)
                </div>
            </div>
            <div class="row justify-content-center">
                <div class="col-3 font-weight-bold">
                    @Html.DisplayNameFor(s => s.BlockPr):
                </div>
                <div class="col-2">
                    @Html.DisplayFor(s => s.BlockPr)
                </div>
            </div>
            <div class="row justify-content-center">
                <div class="col-3 font-weight-bold">
                    @Html.DisplayNameFor(s => s.Dodge):
                </div>
                <div class="col-2">
                    @Html.DisplayFor(s => s.Dodge)
                </div>
            </div>
            <div class="row justify-content-center">
                <div class="col-3 font-weight-bold">
                    @Html.DisplayNameFor(s => s.DodgePr):
                </div>
                <div class="col-2">
                    @Html.DisplayFor(s => s.DodgePr)
                </div>
            </div>
            <div class="row justify-content-center">
                <div class="col-3 font-weight-bold">
                    @Html.DisplayNameFor(s => s.Accuracy):
                </div>
                <div class="col-2">
                    @Html.DisplayFor(s => s.Accuracy)
                </div>
            </div>
            <div class="row justify-content-center">
                <div class="col-3 font-weight-bold">
                    @Html.DisplayNameFor(s => s.Speed):
                </div>
                <div class="col-2">
                    @Html.DisplayFor(s => s.Speed)
                </div>
            </div>
            <div class="row justify-content-center">
                <div class="col-3 font-weight-bold">
                    @Html.DisplayNameFor(s => s.CritChance):
                </div>
                <div class="col-2">
                    @Html.DisplayFor(s => s.CritChance)
                </div>
            </div>
            <div class="row justify-content-center">
                <div class="col-3 font-weight-bold">
                    @Html.DisplayNameFor(s => s.CritPr):
                </div>
                <div class="col-2">
                    @Html.DisplayFor(s => s.CritPr)
                </div>
            </div>
            <div class="row justify-content-center">
                <div class="col-3 font-weight-bold">
                    @Html.DisplayNameFor(s => s.ExtraDropPr):
                </div>
                <div class="col-2">
                    @Html.DisplayFor(s => s.ExtraDropPr)
                </div>
            </div>
        </div>
        <div class="tab-pane fade" id="others" role="tabpanel" aria-labelledby="others-tab">
            @foreach (var prop in typeof(DivineMonad.Models.GameStats).GetProperties())
            {
                if (prop.Name.ToString() != "ID")
                {
                    <div class="row justify-content-center">
                        <div class="col-3 font-weight-bold">
                            @prop.Name:
                        </div>
                        <div class="col-2 pl-5">
                            @prop.GetValue(Model.GameStats)
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>


@section Scripts{
    <script>
        $(document).ready(function () {
            let defaultStatsPoints = parseInt($("#statsPoints").text(), 10);
            let statsPoints = defaultStatsPoints;

            $('.btn-svg').click(function (e) {
                if (statsPoints >= 0) {
                    let operation = $(this).attr("class").split(' ')[1];
                    let statsName = $(this).attr("class").split(' ')[2];
                    if (operation == "plus" && statsPoints > 0) {
                        statsPoints--;
                        let tempPoints = $("#" + statsName).text().split('+')[1].split(')')[0];
                        tempPoints = parseInt(tempPoints, 10);
                        tempPoints++;
                        
                        if (statsName == "stamina") {
                            $("#hitpoints").text("(+" + Math.round((Math.pow(tempPoints, 1.2) * 10)) + ")");
                        } else if (statsName == "strength") {
                            $("#attack").text("(+" + Math.round((Math.pow(tempPoints, 1.2))) + ")");
                        }

                        $("#" + statsName).text("(+" + tempPoints + ")");
                        console.log("Add 1 to " + statsName + " | " + statsPoints);
                    } else if (operation == "minus" && statsPoints < defaultStatsPoints) {
                        let tempPoints = $("#" + statsName).text().split('+')[1].split(')')[0];
                        tempPoints = parseInt(tempPoints, 10);
                        if (tempPoints > 0) {
                            statsPoints++;
                            tempPoints--;

                            if (statsName == "stamina") {
                                $("#hitpoints").text("(+" + Math.round((Math.pow(tempPoints, 1.2) * 10)) + ")");
                            } else if (statsName == "strength") {
                                $("#attack").text("(+" + Math.round((Math.pow(tempPoints, 1.2))) + ")");
                            }

                            $("#" + statsName).text("(+" + tempPoints + ")");
                            console.log("Subtract 1 from " + statsName + " | " + statsPoints);
                        }
                    }
                    $("#statsPoints").text(statsPoints);
                }
            });
        });
    </script>
}
