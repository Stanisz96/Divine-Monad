@model DivineMonad.Models.RaportViewModel

@{ 
    Layout = "_SubLayout";
    int n = 1;
}

<div class="game-content-raport">
    <div class="row opponent mb-4">
        <div class="col-3">
            <img src="@Url.Content(Model.Opponent.ImageUrl)"
                 class="character-avatar" alt="avatar">
        </div>
        <div class="col-6">
            @Model.Opponent.Name <br />
            Level @Model.Opponent.Level
            <div class="progress">
                <div class="progress-bar w-100" role="progressbar" style="background-color: #ff8585;"
                     aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>
            </div> 
        </div>
    </div>
    <div class="row quick raport vertical-scroll">
        <div class="col">
            <div id="quick-raport">
                <p>The fight between @Model.Player.Name and @Model.Opponent.Name has begun.</p>
                @foreach (var round in Model.Raport.Rounds)
                {
                    <div id="@n">
                        @round.Attacker.Name <span>inflict a hit for @round.Attacker.Damage damage.</span> <br />
                        <span class="defender">@round.Defender.Name</span> takes <span class="dmg">@round.Defender.Receive</span> damage and is left with <span class="hp">@round.Defender.HP</span> HP.
                        <p></p>
                    </div>
                    n++;
                }
                @if (Model.Raport.Result == "draw")
                {
                    <div id="@n" class="mt-1">
                        <p>The fight ended in a draw</p>
                    </div>
                }
                else
                {
                    <div id="@n" class="mt-1">
                        <p>@Model.Player.Name <span></span> @Model.Raport.Result <span> the fight.</span></p>
                    </div>
                    if (Model.Raport.Result == "win")
                    {
                        <div id="@(n+1)" class="mt-1">
                            Reward: <br />
                            Gold: @Model.Raport.Reward.Gold G <br />
                            Exp.: @Model.Raport.Reward.Experience exp <br />
                            @if (!(Model.Raport.Reward.ItemName is null))
                            {
                                <span>Item: @Model.Raport.Reward.ItemName *@Model.Raport.Reward.ItemRarity*</span>
                            }
                        </div>
                    }
                }
            </div>
        </div>
    </div>
    <div class="row slow raport vertical-scroll">
        <div class="col" id="slow-raport">
            <p>The fight between @Model.Player.Name and @Model.Opponent.Name has begun.</p>
        </div>
    </div>
    <div class="row player mt-4 justify-content-end">
        <div class="col-6" style="text-align: end;">
            @Model.Player.Name <br />
            Level @Model.Player.CBStats.Level
            <div class="progress">
                <div class="progress-bar w-100" role="progressbar" style="margin-left: auto; background-color: #ff8585;"
                     aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
        </div>
        <div class="col-3">
            <div class="float-right">
                <img src="@Url.Content(Model.Player.AvatarUrl)"
                     class="character-avatar" alt="avatar">
            </div>
        </div>
    </div>
</div>

@section Scripts{ 
    <script>
        $(document).ready(function (e) {
            let quickFight = (getCookie("quickFight") == "true");
            console.log(quickFight);
            $("html").animate({ scrollTop: 0 }, 100);

            var quickRaport = $("#quick-raport").children();
            var slowRaport = $("#slow-raport");
            var i = 1;

            let opponentMaxHp = 0;
            let opponentHp = 0;
            let playerMaxHp = 0;
            let playerHp = 0;

            if ($("#quick-raport").find("#1" + " .defender").text() == "@Model.Opponent.Name") {
                opponentMaxHp = parseInt($("#quick-raport").find("#1" + " .hp").text(), 10) +
                    parseInt($("#quick-raport").find("#1" + " .dmg").text());
                playerMaxHp = parseInt($("#quick-raport").find("#2" + " .hp").text(), 10) +
                    parseInt($("#quick-raport").find("#2" + " .dmg").text());
            } else {
                opponentMaxHp = parseInt($("#quick-raport").find("#2" + " .hp").text(), 10) +
                    parseInt($("#quick-raport").find("#2" + " .dmg").text());
                playerMaxHp = parseInt($("#quick-raport").find("#1" + " .hp").text(), 10) +
                    parseInt($("#quick-raport").find("#1" + " .dmg").text());
            }
            playerHp = playerMaxHp;
            opponentHp = opponentMaxHp;

            if (quickFight) {
                $(".slow").css({ display: "none" });
                $(".quick").animate({ scrollTop: $("#quick-raport").height() }, 1000);

                var interval = setInterval(function () {
                    if (i < quickRaport.length) {
                        [playerHp, opponentHp] = updateHpBars(playerHp, opponentHp, i, playerMaxHp, opponentMaxHp);
                        $("div.progress-bar").css({ "transition": "width .1s ease" });
                    } else {
                        updateCharacterInfo(@ViewBag.gold, @ViewBag.exp, @ViewBag.reqExp, @ViewBag.level);
                        clearInterval(interval)
                    }
                    i++;
                }, 40);


            } else {
                $(".quick").css({ display: "none" });

                var interval = setInterval(function () {
                    if (i < quickRaport.length) {
                        [playerHp, opponentHp] = updateHpBars(playerHp, opponentHp, i, playerMaxHp, opponentMaxHp);
                        $(quickRaport[i]).hide().appendTo(slowRaport).fadeIn(1000);
                        if (i > 3) {
                            $(".slow").animate({ scrollTop: $("#slow-raport").height() }, 1000);
                        }
                    } else {
                        updateCharacterInfo(@ViewBag.gold, @ViewBag.exp, @ViewBag.reqExp, @ViewBag.level);
                        clearInterval(interval)
                    }
                    i++;
                }, 1500);
            }
        });

        function updateHpBars(pHp, oHp, round, pMaxHp, oMaxHp) {
            let oDmg, pDmg;
            var opponent = "@Model.Opponent.Name"
            if ($("#quick-raport").find("#" + round + " .defender").text() == opponent) {
                oDmg = parseInt($("#quick-raport").find("#" + round + " .dmg").text(), 10);
                if (isNaN(oDmg)) oDmg = 0;
                oHp -= oDmg;
            } else {
                pDmg = parseInt($("#quick-raport").find("#" + round + " .dmg").text(), 10);
                if (isNaN(pDmg)) pDmg = 0;
                pHp -= pDmg;
            }
            if (oHp < 0) oHp = 0;
            if (pHp < 0) pHp = 0;

            $(".opponent .w-100").attr('style', `width: ${Math.round(oHp / oMaxHp * 100)}% !important; background-color: #ff8585;`);
            if (oHp == 0) $(".opponent .w-100").attr('style', `background-color: #e9ecef;`);
            $(".player .w-100").attr('style', `width: ${Math.round(pHp / pMaxHp * 100)}% !important; background-color: #ff8585; margin-left: auto;`);

            return [pHp, oHp];
        };
    </script>
}